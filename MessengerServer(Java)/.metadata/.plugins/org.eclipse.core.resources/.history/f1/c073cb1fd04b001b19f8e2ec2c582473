import java.util.LinkedList;
import java.util.HashMap;
import java.io.*;
import java.net.Socket;
import java.lang.StringBuilder;
import java.lang.StringBuffer;

public class ClientHandler implements Runnable{
	private final Socket sock;
	private final DataInputStream dis;
	private final DataOutputStream dos;
	
	private HashMap<Integer, Room> rooms;
	private LinkedList<String> chat;
	private Room crntRoom = null;
	
	private String name = "Anonymous";
	
	public ClientHandler(Socket sock, DataInputStream dis, DataOutputStream dos, HashMap<Integer, Room> rooms, LinkedList<String> chat) {
		this.sock = sock;
		this.dis = dis;
		this.dos = dos;
		this.rooms = rooms;
	}
	
	@Override
	public void run() {
		String recieved = "";
		while(true) {
			try {	
				recieved = dis.readUTF();
				
				if(recieved.length() < 4) {
					System.out.println("Error: Incorrect Message Length");
					//dos.writeUTF("FAL|");
				}else if(!readMessage(recieved)) {
					System.out.println("Error: Invalid Message");
					//dos.writeUTF("FAL|");
				}else {
					//dos.writeUTF("SUC|");
				}
			}catch(EOFException e) {
				e.printStackTrace();
				return;
			}catch(IOException e) {
				e.printStackTrace();
			}
		}
		
		/*String recieved = "";
		try {	
			recieved = dis.readUTF();
			
			if(recieved.length() < 4) {
				System.out.println("Error: Incorrect Message Length");
				dos.writeUTF("FAL|");
			}else if(!readMessage(recieved)) {
				System.out.println("Error: Invalid Message");
				dos.writeUTF("FAL|");
			}else {
				dos.writeUTF("SUC|");
			}
		}catch(EOFException e) {
			e.printStackTrace();
		}catch(IOException e) {
			e.printStackTrace();
		}
		
		//Close everything
		try {
			dis.close();
			dos.close();
			sock.close();
		}catch(IOException e) {
			e.printStackTrace();
		}
		return;*/
	}
	
	public Socket getSock() {
		return sock;
	}
	
	private boolean readMessage(String msg) {
		System.out.println("Recieving message: " + msg);
		String type = msg.substring(0, 4);
		boolean isSuccessful = false;
		switch(type) {
			//send message
			case "MSG|": 
				synchronized(chat) {
					chat.addFirst(readMsgSeg(msg, 4));
					isSuccessful = true;
				}
				break;
				
			//change name
			case "NAM|": 
				name = readMsgSeg(msg, 4);
				isSuccessful = true;
				break;
				
			//create room
			case "RMC|": 
				try{
					int roomNumber = Integer.parseInt(readMsgSeg(msg, 4));
					System.out.println("Attempting to create room " + roomNumber);
					synchronized(rooms) {
						if(!rooms.containsKey(roomNumber)) {
							Room r = new Room(roomNumber);
							rooms.put(roomNumber, r);
							isSuccessful = true;
						}else {
							System.out.println("Room Already Exists");
						}
					}
				}catch(NumberFormatException e){
					e.printStackTrace();
				}
				break;
				
			//join room
			case "RMJ|": 
				try{
					int roomNumber = Integer.parseInt(readMsgSeg(msg, 4));
					if(rooms.containsKey(roomNumber)) {
						crntRoom = rooms.get(roomNumber);
						isSuccessful = true;
					}else {
						System.out.println("Room Does Not Exist");
					}
				}catch(NumberFormatException e){
					e.printStackTrace();
				}
				break;
				
			//leave room
			case "RML|": 
				crntRoom = null;
				isSuccessful = true;
				break;
			default:
				System.out.println("ERROR: Invalid Message");
				break;
		}
		return isSuccessful;
	}
	
	private String readMsgSeg(String msg, int index) {
		StringBuffer numberStr = new StringBuffer(msg.length());
		
		int i = index;
		while(msg.charAt(i) != '|' && i < msg.length()) {
			numberStr.append(msg.charAt(i));
			i++;
		}
		return numberStr.toString();

		/*int i = index;
		while(msg.charAt(i) != '|' && i < msg.length()) {System.out.println(i);}
		return msg.substring(index, i);*/
	}
}
